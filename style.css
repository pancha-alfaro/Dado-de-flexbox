body{
	margin: 0;
	padding: 0;
	font-family: 'Roboto', sans-serif;
	background: #333;
	color: #fff;
}

section {
	display: flex;
	justify-content: center;
	flex-wrap: wrap;
}

/* El ^= se usa para seleccionar diferentes atributos. 
En este caso, la sintaxis representa una clase de HTML que tenga el valor de "cara-". 
De esa manera, podemos al mismo tiempo tener las caras del dado en clases diferentes y con diferentes nombres 
y sin tener que crear cada cara por separado  */

/* El primer paso es hacer asignarle a las caras el display: flex; para hacerlas un container de flexbox */
[class^="cara-"] {
    display: flex;
	margin: 1em;
	width: 150px;
	height: 150px;
	padding: 15px;
	background: #FEFEF6;
	border-radius: 10%;
}

.punto {
	width: 20px;
	height: 20px;
	border-radius: 50%;
	background: black;
	box-shadow: inset 0 3px #111, inset 0 -3px #555;
}

/* El punto va en el centro del dado, por lo que tenemos que centrarlo tanto como horizontalmente (justify-content) 
tanto como verticalmente (align-items) */
.cara-uno{
	justify-content: center;
	align-items: center;
}

/* Los espacios de los puntos deben ser uniformes y tomar el total espacio delimitado (space-between) */
.cara-dos {
    justify-content: space-between;
}

/*Para dejar X punto(s) en partes diferentes pero al mismo tiempo NO mover los otro puntos, 
con .punto:nth-of-type(X) seleccionamos unicamente el punto que queremos mover y posicionamos usando 
la siguiente propiedad (align-self) */
.cara-dos .punto:nth-of-type(2) {
    align-self: flex-end;
}
 
.cara-tres {
    justify-content: space-between;
}

.cara-tres .punto:nth-of-type(2){
    align-self: center;
}

.cara-tres .punto:nth-of-type(3) {
    align-self: flex-end;
}

.cara-cuatro{
	justify-content: space-between;
}

/* Como necesitamos posicionar los puntos en lados paralelos
 anidamos los pares de puntos dentro de otras clases, creando dos columnas */
.cara-cuatro .columna {
	display: flex;
	flex-direction: column;
	justify-content: space-between;
}

.cara-cinco {
    display: flex;
    justify-content: space-between;
}


.cara-cinco .columna {
	display: flex;
	flex-direction: column;
	justify-content: space-between;
}

/* Como necesitamos posicionar solo un punto independiente de los otros cuatros,
creamos una clase separada para el */

.cara-cinco .medio {
    align-self: center;
    justify-content: center;
}

.cara-seis {
    display: flex;
    justify-content: space-between;
}

.cara-seis .columna {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}